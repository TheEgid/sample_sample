import nextPlugin from "@next/eslint-plugin-next";
import stylistic from "@stylistic/eslint-plugin";
import typescriptEslint from "@typescript-eslint/eslint-plugin";
import typescriptParser from "@typescript-eslint/parser";
import importX from "eslint-plugin-import-x";
import reactPlugin from "eslint-plugin-react";
import hooksPlugin from "eslint-plugin-react-hooks";
import sonarjs from "eslint-plugin-sonarjs";

export default [
    {
        files: ["**/*.ts", "**/*.tsx"],
        ignores: ["eslint.config.mjs"],
        languageOptions: {
            parser: typescriptParser,
            parserOptions: {
                project: ["./tsconfig.json"],
                sourceType: "module",
                tsconfigRootDir: import.meta.dirname,
            },
        },
        plugins: {
            "@next/next": nextPlugin,
            "import-x": importX,
            react: reactPlugin,
            "react-hooks": hooksPlugin,
            "@stylistic": stylistic,
            sonarjs,
            "@typescript-eslint": typescriptEslint,
        },
        settings: {react: {version: "detect"}},
        rules: {
            ...typescriptEslint.configs.recommended.rules,
            ...reactPlugin.configs["jsx-runtime"].rules,
            ...reactPlugin.configs.recommended.rules,
            ...hooksPlugin.configs.recommended.rules,
            ...nextPlugin.configs.recommended.rules,
            ...nextPlugin.configs["core-web-vitals"].rules,
            "@stylistic/no-multiple-empty-lines": [
                "error",
                {max: 1, maxBOF: 0, maxEOF: 0},
            ],
            "@stylistic/lines-between-class-members": ["error", "always"],
            "@stylistic/padding-line-between-statements": [
                "error",
                {blankLine: "always", prev: ["const", "let", "var"], next: "*"},
                {
                    blankLine: "any",
                    prev: ["const", "let", "var"],
                    next: ["const", "let", "var"],
                },
            ],
            "@stylistic/indent": ["error", 4],
            "@stylistic/no-tabs": ["error", {allowIndentationTabs: true}],
            "@stylistic/jsx-quotes": ["warn", "prefer-double"],
            "@next/next/no-duplicate-head": "off",
            "@next/next/no-img-element": "error",
            "@next/next/no-page-custom-font": "off",
            "react-hooks/exhaustive-deps": "off",
            "react/jsx-curly-spacing": "warn",
            "react/jsx-equals-spacing": "warn",
            "react/jsx-wrap-multilines": "warn",
            "sonarjs/cognitive-complexity": ["error", 40],
            "import-x/no-unresolved": "off",
            "import-x/first": "error",
            "import-x/named": "off",
            "import-x/newline-after-import": "error",
            "import-x/order": [
                "error",
                {
                    groups: [
                        ["builtin", "external"],
                        "internal",
                        "parent",
                        ["sibling", "index"],
                        "object",
                        "type",
                    ],
                    pathGroups: [
                        {
                            pattern: "react",
                            group: "external",
                            position: "before",
                        },
                    ],
                    pathGroupsExcludedImportTypes: ["react"],
                    "newlines-between": "never",
                    alphabetize: {order: "asc", caseInsensitive: true},
                },
            ],
            "@typescript-eslint/no-explicit-any": "off",
            "@typescript-eslint/adjacent-overload-signatures": "error",
            "@typescript-eslint/consistent-type-assertions": "error",
            "@typescript-eslint/member-delimiter-style": [
                "error",
                {
                    multiline: {delimiter: "none", requireLast: false},
                    singleline: {delimiter: "comma", requireLast: false},
                },
            ],
            "@typescript-eslint/naming-convention": [
                "error",
                {
                    selector: "variable",
                    format: ["camelCase", "UPPER_CASE", "PascalCase"],
                    leadingUnderscore: "allow",
                },
            ],
            "@typescript-eslint/semi": "error",
            "@typescript-eslint/no-empty-function": "error",
            "@typescript-eslint/no-empty-interface": "error",
            "@typescript-eslint/no-floating-promises": "error",
            "@typescript-eslint/no-misused-new": "error",
            "@typescript-eslint/no-this-alias": "error",
            "@typescript-eslint/no-unnecessary-qualifier": "error",
            "@typescript-eslint/no-unnecessary-type-assertion": "error",
            "@typescript-eslint/no-unused-expressions": "error",
            "@typescript-eslint/no-use-before-define": "error",
            "@typescript-eslint/prefer-for-of": "error",
            "@typescript-eslint/prefer-function-type": "error",
            "@typescript-eslint/prefer-namespace-keyword": "error",
            "@typescript-eslint/triple-slash-reference": [
                "error",
                {path: "always", types: "prefer-import", lib: "always"},
            ],
            "@typescript-eslint/unified-signatures": "error",
            "@typescript-eslint/no-unused-vars": [
                "warn",
                {
                    argsIgnorePattern: "^_",
                    varsIgnorePattern: "^_",
                    caughtErrorsIgnorePattern: "^_",
                },
            ],
            "constructor-super": "error",
            "no-bitwise": "error",
            "no-caller": "error",
            "no-cond-assign": "error",
            "no-control-regex": "error",
            "no-debugger": "error",
            "no-duplicate-case": "error",
            "no-duplicate-imports": "error",
            "no-eval": "error",
            "no-extra-bind": "error",
            "no-fallthrough": "error",
            "no-invalid-regexp": "error",
            "no-regex-spaces": "error",
            "no-return-await": "error",
            "no-sequences": "error",
            "no-sparse-arrays": "error",
            "no-template-curly-in-string": "error",
            "no-throw-literal": "error",
            "no-unsafe-finally": "error",
            "no-unused-labels": "error",
            "no-var": "error",
            "object-shorthand": "error",
            "one-var": ["error", "never"],
            "prefer-const": "error",
            "prefer-object-spread": "error",
            "spaced-comment": ["error", "always", {markers: ["/"]}],
            curly: "error",
            "default-case": "error",
            eqeqeq: ["error", "smart"],
            "no-trailing-spaces": "error",
            "no-multi-spaces": "error",
            "react/boolean-prop-naming": [
                "error",
                {rule: "^(is|has)[A-Z]([A-Za-z0-9]?)+"},
            ],
            "react/button-has-type": "error",
            "react/default-props-match-prop-types": [
                "error",
                {allowRequiredDefaults: false},
            ],
            "react/destructuring-assignment": ["warn", "always"],
            "react/display-name": ["off", {ignoreTranspilerName: false}],
            "react/forbid-component-props": ["off", {forbid: []}],
            "react/forbid-dom-props": ["off", {forbid: []}],
            "react/forbid-elements": ["off", {forbid: []}],
            "react/forbid-foreign-prop-types": [
                "warn",
                {allowInPropTypes: true},
            ],
            "react/forbid-prop-types": [
                "warn",
                {
                    forbid: ["any", "array", "object"],
                    checkContextTypes: true,
                    checkChildContextTypes: true,
                },
            ],
            "react/function-component-definition": [
                "off",
                {
                    namedComponents: "function-declaration",
                    unnamedComponents: "function-expression",
                },
            ],
            "react/hook-use-state": "off",
            "react/iframe-missing-sandbox": "off",
            "react/jsx-boolean-value": ["error", "never"],
            "react/jsx-child-element-spacing": "off",
            "react/jsx-closing-bracket-location": ["error", "line-aligned"],
            "react/jsx-closing-tag-location": "error",
            "react/jsx-curly-brace-presence": [
                "error",
                {props: "never", children: "never"},
            ],
            "react/jsx-curly-newline": [
                "error",
                {multiline: "consistent", singleline: "consistent"},
            ],
            "react/jsx-curly-spacing": [
                "error",
                {when: "never", children: true},
            ],
            "react/jsx-equals-spacing": ["error", "never"],
            "react/jsx-first-prop-new-line": ["error", "multiline-multiprop"],
            "react/jsx-fragments": ["error", "syntax"],
            "react/jsx-handler-names": [
                "off",
                {eventHandlerPrefix: "handle", eventHandlerPropPrefix: "on"},
            ],
            "react/jsx-indent": ["error", 4],
            "react/jsx-indent-props": ["error", 4],
            "react/jsx-key": ["error", {checkFragmentShorthand: true}],
            "react/jsx-max-depth": ["off", {max: 4}],
        },
    },
];
